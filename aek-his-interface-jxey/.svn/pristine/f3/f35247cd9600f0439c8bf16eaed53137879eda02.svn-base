package com.aek.service.task;

import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.aek.persistence.oracle.beans.DataErrorInfo;
import com.aek.persistence.oracle.beans.HisDeptInfo;
import com.aek.persistence.oracle.beans.HisFeeInfo;
import com.aek.persistence.oracle.beans.HisInpatientInfo;
import com.aek.persistence.oracle.beans.HisUserInfo;
import com.aek.persistence.oracle.beans.ZyChargeInterface;
import com.aek.persistence.oracle.beans.ZyDetailCharge;
import com.aek.service.transfer.ErrorInfoService;
import com.aek.service.transfer.HisDeptInfoService;
import com.aek.service.transfer.HisFeeInfoService;
import com.aek.service.transfer.HisInpatientInfoService;
import com.aek.service.transfer.HisUerInfoService;
import com.aek.service.transfer.ZyChargeInfoService;
import com.aek.service.transfer.ZyDetailChargeService;
import com.mb.common.util.DateUtils;
import com.mb.common.util.ObjectUtils;

public class ScheduleMysql2Sql {

    @Autowired
    private HisUerInfoService hisUserInfoService;

    @Autowired
    private HisFeeInfoService hisFeeInfoService;

    @Autowired
    private HisInpatientInfoService hisInpatientInfoService;

    @Autowired
    private HisDeptInfoService hisDeptInfoService;

    @Autowired
    private ZyDetailChargeService zyDetailChargeService;

    @Autowired
    private ErrorInfoService errorInfoService;

    @Autowired
    private ZyChargeInfoService zyChargeInfoService;

    private static Logger log = Logger.getLogger(ScheduleMysql2Sql.class);

    /**
     * 服务启动时执行
     * 
     * @Description
     * @author sunhanbin
     * @date 2015-4-18下午09:01:27
     */

    public void runBySeverStart() {
        log.info("--------------Start：runByServerStart()---------------");
        log.info("--------------End  ：runByServerStart()---------------");
    }

    /**
     * 每小时执行一次
     * 
     * @Description
     * @author sunhanbin
     * @date 2015-4-18下午09:01:38
     */
    public void runByHour() {
        log.info("--------------Start：runByHour()-----------------");
        log.info("--------------End  ：runByHour()-----------------");
    }

    /**
     * 每两分钟执行一次
     * 
     * @Description
     * @author sunhanbin
     * @date 2015-4-18下午09:04:11
     */

    public void runByOneMinute() {
        log.info("--------------Start：runByTwoMinute()---------------");
        // 连接到oracle的数据源信息
        int size = 1000;
        copyDept(size);

        copyFee(size);

        copyInpatient(size);

        copyUser(size);

        copyDetail(size);

        // 将oracle中的数据与mysql中的数据进行处理
        int chargeRs = this.copyChargeInfo(size);

        /*if (deptRs == inpaitentRs && inpaitentRs == feeRs && feeRs == detailRs && detailRs == chargeRs
                && chargeRs == userRs && userRs == 1) {
            log.info("--------------输入传输成功！---------------");
        }*/

        log.info("--------------End  ：runByTwoMinute()---------------");
    }

    private void copyDetail(int size) {
        int detailRs = 0;
        try {
            int i = 1;
            while (i != 0) {
                List<ZyDetailCharge> detailOracleList = null;
                detailOracleList = zyDetailChargeService.getSqlserverList((i - 1) * size + 1, i * size + 1);
                if (ObjectUtils.isNotEmpty(detailOracleList)) {
                    List<ZyDetailCharge> detailMysqlList = this.zyDetailChargeService.getMysqlList(detailOracleList);
                    detailRs += this.zyDetailChargeService.copyMZyDetailCharge(detailOracleList, detailMysqlList);
                    i++;
//                    i = (detailOracleList.size() == size) ? (i + 1) : 0;
                } else {
                    i = 0;
                }
            }
        } catch (Exception e) {
            log.error("copy ZyDetailCharge occured a problem , the message info is : " + e.getMessage());
        }
    }

    private void copyUser(int size) {
        int userRs = 0;
        try {
            int i = 1;
            while (i != 0) {
                List<HisUserInfo> userOracleList = null;
                userOracleList = this.hisUserInfoService.getSqlserverList((i - 1) * size + 1, i * size + 1);
                if (ObjectUtils.isNotEmpty(userOracleList)) {
                    List<HisUserInfo> userMysqlList = this.hisUserInfoService.getMysqlList(userOracleList);
                    userRs += this.hisUserInfoService.copyUser(userOracleList, userMysqlList);
                    i++;
//                    i = (userOracleList.size() == size) ? (i + 1) : 0;
                } else {
                    i = 0;
                }
            }
            userRs = userRs == i ? 1 : 0;
        } catch (Exception e) {
            log.error("copy HisUserInfo occured a problem , the message info is :" + e.getMessage());
        }
    }

    private void copyInpatient(int size) {
        int inpaitentRs = 0;
        try {
            int i = 1;
            while (i != 0) {
                List<HisInpatientInfo> inpatientOracleList = null;
                inpatientOracleList = this.hisInpatientInfoService.getSqlserverList((i - 1) * size + 1, i * size + 1);
                if (ObjectUtils.isNotEmpty(inpatientOracleList)) {
                    List<HisInpatientInfo> inpaitentMysqlList = this.hisInpatientInfoService
                            .getMysqlList(inpatientOracleList);
                    inpaitentRs += this.hisInpatientInfoService.copyHisInpatient(inpatientOracleList,
                            inpaitentMysqlList);
                    i++;
//                    i = (inpatientOracleList.size() == size) ? i + 1 : 0;
                } else {
                    i = 0;
                }
            }

        } catch (Exception e) {
            log.error("copy HisInpatientInfo occured a problem , the message info is : " + e.getMessage());
        }
    }

    private void copyFee(int size) {
        int feeRs = 0;
        try {
            int i = 1;
            while (i != 0) {
                List<HisFeeInfo> feeOracleList = null;
                feeOracleList = this.hisFeeInfoService.getSqlserverList((i - 1) * size + 1, i * size + 1);
                if (ObjectUtils.isNotEmpty(feeOracleList)) {
                    List<HisFeeInfo> feeMysqlList = this.hisFeeInfoService.getMysqlList(feeOracleList);
                    feeRs += this.hisFeeInfoService.copyFeeInfo(feeOracleList, feeMysqlList);
                    i++;
//                    i = (feeOracleList.size() == size) ? (i + 1) : 0;
                } else {
                    i = 0;
                }
            }
            feeRs = feeRs == i ? 1 : 0;
        } catch (Exception e) {
            log.error("copy HisFeeInfo occured a problem , the message info is :" + e.getMessage());
        }
    }

    private void copyDept(int size) {
        int deptRs = 0;
        try {
            int i = 1;
            while (i != 0) {
                List<HisDeptInfo> deptOracleList = null;
                deptOracleList = this.hisDeptInfoService.getSqlserverList((i - 1) * size + 1, i * size + 1);
                if (null != deptOracleList && deptOracleList.size() > 0) {
                    List<HisDeptInfo> deptMysqlList = this.hisDeptInfoService.getMysqlList(deptOracleList);
                    deptRs += this.hisDeptInfoService.copyDeptInfo(deptOracleList, deptMysqlList);
                    i++;
//                    i = (deptOracleList.size() == size) ? i + 1 : 0;
                } else {
                    i = 0;
                }
            }
            deptRs = deptRs == i ? 1 : 0;
        } catch (Exception e) {
            log.error(e.getMessage());
        }
    }

    /**
     * 每晚凌晨00：30分执行一次
     * 
     * @Description
     * @author sunhanbin
     * @date 2015-4-18下午09:01:57
     */

    public void runByMidnight() {
        log.info("--------------Start：runByMidnight()---------------");
        log.info("--------------End  ：runByMidnight()---------------");
    }

    public int copyChargeInfo(int size) {
        int rs = 0;
        Integer mysqlId = null;

        int i = 1;
        while (i != 0) {
            // 查询错误列表信息(执行次数小于三次)
            List<DataErrorInfo> errorList = this.errorInfoService.getExcuteList((i - 1) * size, i * size);
            if (errorList != null && errorList.size() > 0) {
                // 查询到没有操作成功的接口列表信息
                List<ZyChargeInterface> excuteList = this.zyChargeInfoService.getErrorCharge(errorList);
                // 执行错误信息相关的数据en
                for (ZyChargeInterface zyChargeInfo : excuteList) {
                    mysqlId = zyChargeInfo.getId();
                    // 对重新对错误信息处理时进行try catch操作，如果出错则再次修改出错信息
                    try {
                        this.zyChargeInfoService.insert(zyChargeInfo);
                        this.errorInfoService.update(mysqlId);
                    } catch (Exception e1) {
                        this.errorInfoService.updateError(mysqlId);
                    }
                }
            } else {
                i = 0;
            }
        }
        try {
            int j = 1;
            while (j != 0) {
                List<ZyChargeInterface> mysqlList = this.zyChargeInfoService.getMysqlList((j - 1) * size, j * size);
                j += 1;
                if (null != mysqlList && mysqlList.size() > 1) {
                    List<ZyChargeInterface> oracleList = this.zyChargeInfoService.getOracleList(mysqlList);
                    for (ZyChargeInterface mysql : mysqlList) {
                        try {
                            mysqlId = mysql.getId();
                            rs += this.zyChargeInfoService.copyZyChargeInfo(mysql, oracleList);
                        } catch (Exception e) {
                            DataErrorInfo errorInfo = new DataErrorInfo();
                            errorInfo.setErrorMsg(e.getMessage());
                            errorInfo.setPrimaryKey(mysqlId);
                            errorInfo.setExcuteTime(1);
                            errorInfo.setHappenTime(new DateUtils().format(new Date()));
                            errorInfo.setTableName("his_charge_interface");
                            errorInfo.setIsSolved(0);
                            this.errorInfoService.addErrorInfo(errorInfo);
                        }
                    }
                } else {
                    j = 0;
                }
            }
        } catch (Exception e) {
            DataErrorInfo errorInfo = new DataErrorInfo();
            errorInfo.setErrorMsg(e.getMessage());
            errorInfo.setExcuteTime(1);
            errorInfo.setHappenTime(new DateUtils().format(new Date()));
            errorInfo.setTableName("his_charge_interface");
            errorInfo.setIsSolved(0);
            this.errorInfoService.addErrorInfo(errorInfo);
        }
        return rs;
    }
}
