package com.aek.service.transfer.impl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.aek.common.datasource.DataSource;
import com.aek.persistence.mysql.mapper.MHplGoodsSpecsMapper;
import com.aek.persistence.oracle.beans.BdHplGoodsSpecs;
import com.aek.persistence.oracle.mapper.OHplGoodsSpecsMapper;
import com.aek.service.transfer.HplGoodsSpecsService;
import com.mb.common.util.ObjectUtils;

/**
 * 物资规格。操作服务实现类
 * @author Lanpz
 * @date 2016-12-15
 * @source Generated by MySQL2Java
 */
@Service("hplGoodsSpecsService")
@Transactional(rollbackFor = Exception.class)
public class HplGoodsSpecsServiceImpl implements HplGoodsSpecsService {

    @Autowired
    private MHplGoodsSpecsMapper mHplGoodsSpecsMapper;
    
    @Autowired
    private OHplGoodsSpecsMapper oHplGoodsSpecsMapper;
    
    @DataSource(name = DataSource.mysql)
    @Override
    public List<BdHplGoodsSpecs> getMysqlList(Integer begin, Integer end, Integer dateFlag) {
        return mHplGoodsSpecsMapper.getSpecList(begin, end, dateFlag);
    }

    @DataSource(name = DataSource.oracle)
    @Override
    public List<BdHplGoodsSpecs> getOracleList(List<BdHplGoodsSpecs> mysqlList) {
        return oHplGoodsSpecsMapper.getSpecList(mysqlList);
    }

    @DataSource(name = DataSource.oracle)
    @Override
    public int copyMysql2Oracle(List<BdHplGoodsSpecs> mysqlList, List<BdHplGoodsSpecs> oracleList) {
        List<BdHplGoodsSpecs> updateList = new ArrayList<BdHplGoodsSpecs>();
        List<BdHplGoodsSpecs> addList = new ArrayList<BdHplGoodsSpecs>();
        addList.addAll(mysqlList);
        if (ObjectUtils.isNotEmpty(mysqlList)) {
            if (ObjectUtils.isNotEmpty(oracleList)) {
                Iterator<BdHplGoodsSpecs> iterator = addList.iterator();
                
                // 查出需要添加和修改的数据信息放到列表中
                while (iterator.hasNext()) {
                    BdHplGoodsSpecs oracle = iterator.next();
                    Iterator<BdHplGoodsSpecs> oracleIt = oracleList.iterator();
                    while(oracleIt.hasNext()) {
                        BdHplGoodsSpecs mysql = oracleIt.next();
                        if (oracle.getSpecId().equals(mysql.getSpecId())) {
                            if (!oracle.toString().equals(mysql.toString())) {
                                updateList.add(oracle);
                            }
                            iterator.remove();
                            oracleIt.remove();
                            break;
                        }
                    }
                }
            }
            int addModifyNum = 0;
            if (addList != null && addList.size() > 0) {
                    addModifyNum = this.oHplGoodsSpecsMapper.insertList(addList);
            }
            int updateModifyNum = 0;
            if (updateList != null && updateList.size() > 0) {
                updateModifyNum = this.oHplGoodsSpecsMapper.updateList(updateList);
            }
            if (updateModifyNum >= 0 && addModifyNum == addList.size()) {
                return 1;
            }
        }

        return 0;
    }

    @Override
    @DataSource(name = DataSource.oracle)
    public int getOracleList() {
        return oHplGoodsSpecsMapper.getCount();
    }
}
