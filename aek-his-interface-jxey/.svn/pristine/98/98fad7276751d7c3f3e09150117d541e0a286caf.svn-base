package com.aek.service.transfer.impl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.aek.common.datasource.DataSource;
import com.aek.persistence.mysql.mapper.MSdHplStockOutMapper;
import com.aek.persistence.oracle.beans.SdHplStockOut;
import com.aek.persistence.oracle.mapper.OSdHplStockOutMapper;
import com.aek.service.transfer.SdHplStockOutService;
import com.mb.common.util.ObjectUtils;

/**
 * 库房正常出库记录。操作服务实现类
 * 
 * @author Lanpz
 * @date 2016-12-20
 * @source Generated by MySQL2Java
 */
@Service("sdHplStockOutService")
@Transactional(rollbackFor = Exception.class)
public class SdHplStockOutServiceImpl implements SdHplStockOutService {

    @Autowired
    private OSdHplStockOutMapper oSdHplStockOutMapper;

    @Autowired
    private MSdHplStockOutMapper mSdHplStockOutMapper;

    @DataSource(name = DataSource.mysql)
    @Override
    public List<SdHplStockOut> getMysqlList(Integer begin, Integer end, Integer dateFlag) {
        return mSdHplStockOutMapper.getOutList(begin, end, dateFlag);
    }

    @DataSource(name = DataSource.oracle)
    @Override
    public List<SdHplStockOut> getOracleList(List<SdHplStockOut> mysqlList) {
        return oSdHplStockOutMapper.getList(mysqlList);
    }

    @DataSource(name = DataSource.oracle)
    @Override
    public void copyMySql2Oracle(List<SdHplStockOut> mysqlList, List<SdHplStockOut> oracleList) {
        List<SdHplStockOut> updateList = new ArrayList<SdHplStockOut>();

        List<SdHplStockOut> addList = new ArrayList<SdHplStockOut>();
        addList.addAll(mysqlList);
        if (ObjectUtils.isNotEmpty(mysqlList)) {
            if (ObjectUtils.isNotEmpty(oracleList)) {
                Iterator<SdHplStockOut> iterator = addList.iterator();

                // 查出需要添加和修改的数据信息放到列表中
                while (iterator.hasNext()) {
                    SdHplStockOut oracle = iterator.next();
                    Iterator<SdHplStockOut> oracleIt = oracleList.iterator();
                    while (oracleIt.hasNext()) {
                        SdHplStockOut mysql = oracleIt.next();
                        if (oracle.getFormId().equals(mysql.getFormId())) {
                            if (!oracle.toString().equals(mysql.toString())) {
                                updateList.add(oracle);
                            }
                            iterator.remove();
                            oracleIt.remove();
                            break;
                        }
                    }
                }
            }
            int addModifyNum = 0;
            if (addList != null && addList.size() > 0) {
                addModifyNum = this.oSdHplStockOutMapper.insertList(addList);
            }
            int updateModifyNum = 0;
            if (updateList != null && updateList.size() > 0) {
                updateModifyNum = this.oSdHplStockOutMapper.updateList(updateList);
            }
        }
    }

    @DataSource(name = DataSource.oracle)
    @Override
    public int getOracleCount() {
        return oSdHplStockOutMapper.getCount();
    }

}
